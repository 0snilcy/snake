{"version":3,"sources":["types.ts","controllers/game.ts","store.tsx","components/Controls/index.tsx","components/Cell/index.tsx","components/Row/index.tsx","components/Grid/index.tsx","components/Game/index.tsx","components/App/index.tsx","index.tsx"],"names":["AppState","GameState","CellType","Direction","KeyToDirection","ArrowUp","Up","ArrowDown","Down","ArrowRight","Right","ArrowLeft","Left","OppDireciton","Shift","getArray","size","Array","fill","map","Empty","getRandomPosition","n","Math","floor","random","GameController","updateState","updateGrid","minSpeed","maxSpeed","gridSize","pointShift","snake","fruits","lastDirection","state","Wait","score","currentSpeed","speedStep","timer","changeState","this","grid","round","getPoint","getFruit","Action","includes","point","pointArr","getArrFromPoint","Snake","Fruit","row","cell","head","Lose","direction","next","unshift","fruitsLength","length","filter","fruit","pop","Win","push","checkGameStatus","clearTimeout","setTimeout","shift","setTimer","indexOf","defaultValue","debug","setDebug","setGridSize","StoreContext","React","createContext","WithStore","children","useState","defaultStoreValue","Provider","value","useStore","useContext","Controls","speed","className","type","checked","onChange","prev","CellMap","Cell","memo","useDebug","Row","list","id","Grid","getMessage","Game","game","setGame","gameState","setGameState","useEffect","keyHandler","key","move","newGame","document","addEventListener","removeEventListener","App","setSize","ready","setReady","min","max","step","target","onClick","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.876e39f5.chunk.js","sourcesContent":["export enum AppState {\n  Welcome,\n  Action,\n  Win,\n  Lose,\n}\n\nexport enum GameState {\n  Wait,\n  Action,\n  Lose,\n  Win,\n}\n\nexport enum CellType {\n  Empty,\n  Snake,\n  Fruit,\n}\n\nexport type Point = number;\nexport type Row = CellType[];\nexport type Grid = Row[];\nexport type GameGrid = CellType[][];\n\nexport enum Direction {\n  Up,\n  Down,\n  Right,\n  Left,\n}\n\nexport const KeyToDirection = {\n  ArrowUp: Direction.Up,\n  ArrowDown: Direction.Down,\n  ArrowRight: Direction.Right,\n  ArrowLeft: Direction.Left,\n};\n\nexport const OppDireciton = {\n  [Direction.Up]: Direction.Down,\n  [Direction.Down]: Direction.Up,\n  [Direction.Left]: Direction.Right,\n  [Direction.Right]: Direction.Left,\n};\n\nexport const Shift = {\n  [Direction.Up]: -1,\n  [Direction.Down]: 1,\n  [Direction.Left]: -1,\n  [Direction.Right]: 1,\n};\n","import {\n  CellType,\n  Direction,\n  Shift,\n  Point,\n  GameState,\n  GameGrid,\n  OppDireciton,\n} from '../types';\n\nconst getArray = (size: number) =>\n  Array(size)\n    .fill('')\n    .map(() => CellType.Empty);\n\nconst getRandomPosition = (n: number) => Math.floor(Math.random() * n);\n\ninterface GameControllerConstructor {\n  updateState: (state: GameState) => void;\n  updateGrid: (grid: GameGrid) => void;\n  maxSpeed: number;\n  minSpeed: number;\n  gridSize: number;\n}\n\nexport class GameController {\n  private pointShift = 100;\n  size: number;\n  snake: Point[];\n  fruits: Point[];\n  lastDirection: Direction | null = null;\n  state: GameState = GameState.Wait;\n  score = 0;\n  currentSpeed: number;\n  maxSpeed: number;\n  minSpeed: number;\n  speedStep: number;\n  timer: NodeJS.Timeout | null = null;\n\n  changeState: (state: GameState) => void;\n  updateGrid: () => void;\n\n  constructor({\n    updateState,\n    updateGrid,\n    minSpeed,\n    maxSpeed,\n    gridSize,\n  }: GameControllerConstructor) {\n    this.changeState = (state: GameState) => {\n      updateState(state);\n      this.state = state;\n    };\n\n    this.updateGrid = () => {\n      updateGrid(this.grid);\n    };\n\n    this.minSpeed = minSpeed;\n    this.maxSpeed = maxSpeed;\n    this.currentSpeed = minSpeed;\n    this.speedStep = Math.round((minSpeed - maxSpeed) / gridSize ** 2);\n    this.size = gridSize;\n    this.snake = [\n      this.getPoint(Math.floor(this.size / 2), Math.floor(this.size / 2)),\n    ];\n    this.fruits = [this.getFruit()];\n  }\n\n  get grid(): GameGrid {\n    const grid = getArray(this.size).map(() => getArray(this.size));\n\n    if (![GameState.Wait, GameState.Action].includes(this.state)) return grid;\n\n    for (const point of this.snake) {\n      const pointArr = this.getArrFromPoint(point);\n      grid[pointArr[0]][pointArr[1]] = CellType.Snake;\n    }\n\n    for (const point of this.fruits) {\n      const pointArr = this.getArrFromPoint(point);\n      grid[pointArr[0]][pointArr[1]] = CellType.Fruit;\n    }\n\n    return grid;\n  }\n\n  private getPoint(row: number, cell: number): Point {\n    return row * this.pointShift + cell;\n  }\n\n  private getArrFromPoint(point: Point): number[] {\n    return [\n      Math.floor(point / this.pointShift),\n      Math.round(((point / this.pointShift) % 1) * this.pointShift),\n    ];\n  }\n\n  private checkGameStatus() {\n    const head = this.getArrFromPoint(this.snake[0]);\n\n    if (\n      head[0] < 0 ||\n      head[0] > this.size - 1 ||\n      head[1] < 0 ||\n      head[1] > this.size - 1\n    ) {\n      this.changeState(GameState.Lose);\n    }\n  }\n\n  private shift(direction: Direction) {\n    let next = this.snake[0];\n\n    if (direction === Direction.Up || direction === Direction.Down) {\n      next += Shift[direction] * this.pointShift;\n    } else if (direction === Direction.Left || direction === Direction.Right) {\n      next += Shift[direction];\n    }\n\n    if (this.snake.includes(next)) {\n      this.changeState(GameState.Lose);\n      return;\n    }\n\n    this.snake.unshift(next);\n\n    const fruitsLength = this.fruits.length;\n    this.fruits = this.fruits.filter((fruit) => fruit !== next);\n    if (fruitsLength === this.fruits.length) {\n      this.snake.pop();\n    } else {\n      if (this.snake.length === this.size ** 2) {\n        return this.changeState(GameState.Win);\n      }\n      this.score += 1;\n      this.currentSpeed =\n        this.minSpeed - (this.snake.length - 1) * this.speedStep;\n      this.fruits.push(this.getFruit());\n    }\n\n    this.lastDirection = direction;\n    this.checkGameStatus();\n  }\n\n  private setTimer(direction: Direction) {\n    if (this.timer) clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      this.shift(direction);\n      this.updateGrid();\n\n      if ([GameState.Wait, GameState.Action].includes(this.state))\n        this.setTimer(direction);\n    }, 200);\n  }\n\n  private getFruit() {\n    let point;\n\n    do {\n      point = this.getPoint(\n        getRandomPosition(this.size),\n        getRandomPosition(this.size)\n      );\n    } while (~this.snake.indexOf(point));\n\n    return point;\n  }\n\n  move(direction: Direction) {\n    if (\n      [GameState.Wait, GameState.Action].includes(this.state) &&\n      this.lastDirection &&\n      (direction === this.lastDirection ||\n        direction === OppDireciton[this.lastDirection])\n    )\n      return;\n\n    this.shift(direction);\n    this.setTimer(direction);\n  }\n}\n","import React, { FC, useContext, useState } from 'react';\n\nconst defaultValue = {\n  debug: false,\n  minSpeed: 1000,\n  maxSpeed: 200,\n  gridSize: 9,\n  setDebug: () => {},\n  setGridSize: () => {},\n};\n\ntype DefaultStore = typeof defaultValue;\ntype StoreType = Omit<DefaultStore, 'setDebug' | 'setGridSize'> & {\n  setDebug: React.Dispatch<React.SetStateAction<boolean>>;\n  setGridSize: React.Dispatch<React.SetStateAction<number>>;\n};\n\nexport const StoreContext = React.createContext<StoreType>(defaultValue);\n\nexport const WithStore: FC = ({ children }) => {\n  const [debug, setDebug] = useState(defaultValue.debug);\n  const [gridSize, setGridSize] = useState(defaultValue.gridSize);\n\n  const defaultStoreValue = {\n    ...defaultValue,\n    debug,\n    setDebug,\n    gridSize,\n    setGridSize,\n  };\n\n  return (\n    <StoreContext.Provider value={defaultStoreValue}>\n      {children}\n    </StoreContext.Provider>\n  );\n};\n\nexport const useStore = () => {\n  return useContext(StoreContext);\n};\n\nexport const useDebug = () => {\n  const { debug, setDebug } = useStore();\n  return { debug, setDebug };\n};\n","import React, { FC } from 'react';\nimport { useStore } from '../../store';\nimport './index.css';\n\ninterface Props {\n  speed: number;\n  score: number;\n  speedStep: number;\n}\n\nexport const Controls: FC<Props> = ({ speed, score, speedStep }) => {\n  const { debug, setDebug, minSpeed, maxSpeed, gridSize } = useStore();\n\n  return (\n    <section className=\"controls\">\n      <h2>State</h2>\n      <p>\n        <label>\n          Debug:\n          <input\n            type=\"checkbox\"\n            checked={debug}\n            onChange={() => setDebug((prev) => !prev)}\n          />\n        </label>\n      </p>\n      <p>Score: {score}</p>\n      <p>Grid size: {gridSize}</p>\n      <p>Cell length: {gridSize ** 2}</p>\n\n      <dl>\n        <dt>Speed</dt>\n        <dd>current: {speed}ms</dd>\n        <dd>step: {speedStep}ms</dd>\n        <dd>min: {minSpeed}ms</dd>\n        <dd>max: {maxSpeed}ms</dd>\n      </dl>\n    </section>\n  );\n};\n","import React, { FC, memo } from 'react';\nimport { useDebug } from '../../store';\nimport { CellType } from '../../types';\nimport './index.css';\n\ninterface Props {\n  type: CellType;\n}\n\nconst CellMap = ['', <div className=\"snake\"></div>, '🥑'];\n\nexport const Cell: FC<Props> = memo(({ type }) => {\n  const { debug } = useDebug();\n  return <div className=\"cell\">{debug ? type : CellMap[type]}</div>;\n});\n","import React, { FC, memo } from 'react';\nimport { Cell } from '../Cell';\nimport './index.css';\n\ninterface Props {\n  list: number[];\n}\n\nexport const Row: FC<Props> = memo(({ list }) => {\n  return (\n    <div className=\"row\">\n      {list.map((type, id) => (\n        <Cell type={type} key={id} />\n      ))}\n    </div>\n  );\n});\n","import React, { FC, memo } from 'react';\nimport { GameGrid } from '../../types';\nimport { Row } from '../Row';\n\ninterface Props {\n  grid: GameGrid;\n}\n\nexport const Grid: FC<Props> = memo(({ grid }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((list, id) => (\n        <Row list={list} key={id} />\n      ))}\n    </div>\n  );\n});\n","import React, { FC, useEffect, useState } from 'react';\nimport { GameController } from '../../controllers/game';\nimport { useStore } from '../../store';\nimport { GameGrid, GameState, KeyToDirection } from '../../types';\nimport { Controls } from '../Controls';\nimport { Grid } from '../Grid';\n\nconst getMessage = (state: GameState.Lose | GameState.Win) => {\n  return {\n    [GameState.Lose]: <h2>Game over: Lose 🙀</h2>,\n    [GameState.Win]: <h2>Game over: Win 🎉</h2>,\n  }[state];\n};\n\nexport const Game: FC = () => {\n  const [grid, updateGrid] = useState<GameGrid>([[]]);\n  const [game, setGame] = useState<GameController | null>(null);\n  const [gameState, setGameState] = useState<GameState>(GameState.Wait);\n  const { maxSpeed, minSpeed, gridSize } = useStore();\n\n  useEffect(() => {\n    const keyHandler = ({ key }: KeyboardEvent) => {\n      if (gameState === GameState.Wait) setGameState(GameState.Action);\n\n      if (key in KeyToDirection && game) {\n        game.move(KeyToDirection[key as keyof typeof KeyToDirection]);\n        updateGrid(game.grid);\n      }\n    };\n\n    if (gameState === GameState.Wait && !game) {\n      const newGame = new GameController({\n        updateState: setGameState,\n        updateGrid,\n        maxSpeed,\n        minSpeed,\n        gridSize,\n      });\n      setGame(newGame);\n      updateGrid(newGame.grid);\n    }\n\n    if ([GameState.Wait, GameState.Action].includes(gameState)) {\n      document.addEventListener('keydown', keyHandler);\n    }\n\n    return () => document.removeEventListener('keydown', keyHandler);\n  }, [gameState, game, maxSpeed, minSpeed, gridSize]);\n\n  return (\n    <div>\n      <h2>Snake</h2>\n      <div className=\"row-container\">\n        {[GameState.Wait, GameState.Action].includes(gameState) ? (\n          <Grid grid={grid} />\n        ) : (\n          getMessage(gameState as GameState.Lose | GameState.Win)\n        )}\n      </div>\n      {game && (\n        <Controls\n          score={game.score}\n          speed={game.currentSpeed}\n          speedStep={game.speedStep}\n        />\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './index.css';\n\nimport { Game } from '../Game';\nimport { useStore } from '../../store';\n\nexport const App = () => {\n  const { gridSize, setGridSize } = useStore();\n  const [size, setSize] = useState(gridSize);\n  const [ready, setReady] = useState(false);\n\n  return (\n    <section className=\"app\">\n      {ready ? (\n        <Game />\n      ) : (\n        <>\n          <h2>Welcome</h2>\n          <p>\n            Grid size: {size}x{size}\n          </p>\n          <input\n            type=\"range\"\n            min=\"3\"\n            max=\"27\"\n            step=\"2\"\n            defaultValue={size}\n            onChange={({ target }) => {\n              setSize(+target.value);\n            }}\n          />\n          <button\n            type=\"button\"\n            onClick={() => {\n              setGridSize(size);\n              setReady(true);\n            }}\n          >\n            Start\n          </button>\n        </>\n      )}\n    </section>\n  );\n};\n","import React from 'react';\nimport './index.css';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\nimport { WithStore } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <WithStore>\n      <App />\n    </WithStore>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}